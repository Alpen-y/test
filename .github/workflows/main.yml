# 🚀 Vue 项目自动化部署工作流
name: 自动构建部署Vue项目

# ⏰ 触发条件：代码推送至主分支时自动执行
on:
  push:
    branches: [ "main" ]

# 🔑 所需权限配置
permissions:
  contents: write  # 允许写入gh-pages分支

# 🏗️ 定义工作流任务
jobs:
  build-and-deploy:
    name: 「构建部署」全流程作业
    runs-on: ubuntu-latest  # 🖥️ 使用最新版Ubuntu运行器

    # 📌 任务步骤分解
    steps:
      # ————————————————————————
      # 🔍 步骤1：代码仓库初始化
      # ————————————————————————
      - name: "🔗 代码仓库初始化 | Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ⚙️ 获取完整提交历史

      # ————————————————————————
      # ⚙️ 步骤2：Node.js环境配置
      # ————————————————————————
      - name: "🛠️ Node.js环境配置 | v18 LTS"
        uses: actions/setup-node@v3
        with:
          node-version: "18"  # 📌 指定LTS版本
          cache: "pnpm"       # 🗄️ 启用pnpm缓存

      # ————————————————————————
      # 📦 步骤3：包管理器安装
      # ————————————————————————
      - name: "📦 PNPM包管理器安装 | v8.x"
        uses: pnpm/action-setup@v2
        with:
          version: 8         # 🚀 指定pnpm版本
          run_install: false # 🚫 禁用自动安装

      # ————————————————————————
      # 🧩 步骤4：依赖安装与构建
      # ————————————————————————
      - name: "⚡ 依赖安装与项目构建"
        run: |
          echo "➡️ 正在安装项目依赖..."
          pnpm install --frozen-lockfile  # 🧊 使用锁定文件安装
          
          echo "🚀 开始构建生产环境包..."
          pnpm build --mode production    # 🏗️ 执行构建命令
          
          echo "✅ 构建完成，查看文件结构："
          ls -lh dist/  # 📂 显示构建目录结构

      # ————————————————————————
      # 🚀 步骤5：GitHub Pages部署
      # ————————————————————————
      - name: "🌍 部署到GitHub Pages"
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages       # 🎯 目标分支
          folder: dist           # 📁 部署目录
          clean: true            # 🧹 清理旧文件
          single-commit: true    # ✨ 使用单次提交
          commit-message: "🚀 自动部署：$(date -u +'%Y-%m-%dT%H:%M:%SZ')"  # ⏱️ 带时间戳的提交信息

